# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Role {
  id: String!
  role: UserRole!
  createdAt: String!
  updatedAt: String!
}

"""The user role assigned"""
enum UserRole {
  SUPER_ADMIN
  ADMIN
  EDUCATOR
  STUDENT
  PUBLIC_USER
}

type AssessmentType {
  id: String!
  name: String
  createdAt: String!
  updatedAt: String!
}

type ClassRoomNeed {
  id: String!
  name: String
  createdAt: String!
  updatedAt: String!
}

type ContentLink {
  id: String!
  name: String
  url: String
  resource: Resource
  createdAt: String!
  updatedAt: String!
}

type ContentWarning {
  id: String!
  name: String
  createdAt: String!
  updatedAt: String!
}

type EvaluationPreference {
  id: String!
  name: String
  createdAt: String!
  updatedAt: String!
}

type Format {
  id: String!
  name: String
  createdAt: String!
  updatedAt: String!
}

type Journalist {
  id: String!
  name: String
  organization: String
  createdAt: String!
  updatedAt: String!
}

type NewsLiteracyTopic {
  id: String!
  name: String
  createdAt: String!
  updatedAt: String!
}

type NLNOTopNavigation {
  id: String!
  name: String
  createdAt: String!
  updatedAt: String!
}

type NlpStandard {
  id: String!
  name: String
  description: String
  createdAt: String!
  updatedAt: String!
}

type Prerequisite {
  id: String!
  name: String
  createdAt: String!
  updatedAt: String!
}

type ResourceType {
  id: String!
  name: String
  createdAt: String!
  updatedAt: String!
}

type SubjectArea {
  id: String!
  name: String
  createdAt: String!
  updatedAt: String!
}

type WordWallTerms {
  id: String!
  name: String
  createdAt: String!
  updatedAt: String!
}

type WordWallTermLink {
  id: String!
  name: String
  createdAt: String!
  updatedAt: String!
}

type MediaOutletsFeatured {
  id: String!
  name: String
  createdAt: String!
  updatedAt: String!
}

type MediaOutletsMentioned {
  id: String!
  name: String
  createdAt: String!
  updatedAt: String!
}

type EssentialQuestion {
  id: String!
  name: String
  createdAt: String!
  updatedAt: String!
}

type Resource {
  id: String!
  contentTitle: String
  contentDescription: String
  linkToDescription: String
  onlyOnCheckology: Boolean
  checkologyPoints: Float
  featuredInSift: Boolean
  estimatedTimeToComplete: String
  averageCompletedTime: String
  shouldGoToDormant: String
  status: String
  imageGroup: String
  imageStatus: String
  auditStatus: String
  auditLink: String
  userFeedBack: String
  linkToTranscript: String
  slug: String
  primaryImage: String
  thumbnailImage: String
  journalist: [Journalist]
  linksToContent: [ContentLink]
  linkToContentId: String
  resourceType: [ResourceType]
  nlnoTopNavigation: [NLNOTopNavigation]
  format: [Format]
  gradeLevel: [Grade]
  classRoomNeed: [ClassRoomNeed]
  subjectArea: [SubjectArea]
  nlpStandard: [NlpStandard]
  newsLiteracyTopic: [NewsLiteracyTopic]
  contentWarning: [ContentWarning]
  evaluationPreference: [EvaluationPreference]
  assessmentType: [AssessmentType]
  prerequisite: [Prerequisite]
  wordWallTerms: [WordWallTerms]
  wordWallTermLinks: [WordWallTermLink]
  mediaOutletFeatureds: [MediaOutletsFeatured]
  mediaOutletMentionds: [MediaOutletsMentioned]
  essentialQuestions: [EssentialQuestion]
  createdTime: String!
  lastReviewDate: String!
  lastModifyDate: String!
  createdAt: String!
  updatedAt: String!
  contentLink: [ContentLink!]
}

type Grade {
  id: String!
  name: String
  createdAt: String!
  updatedAt: String!
}

type Organization {
  name: String
  category: SchoolType!
  zip: String
  city: String
  state: String
  street: String
}

"""The School Type assigned"""
enum SchoolType {
  K_12_PUBLIC_SCHOOL
  K_12_PRIVATE_SCHOOL
  COLLEGE_OR_UNIVERSITY
  PUBLIC_LIBRARY
  HOME_SCHOOL_OR_VIRTUAL_SCHOOL
  COMMUNITY_ORGANIZATION
  I_DONOT_WORK_IN_EDUCATION
}

type User {
  id: String!
  firstName: String
  lastName: String
  status: UserStatus!
  emailVerified: Boolean!
  email: String!
  roles: [Role]
  country: Country!
  gradeLevel: [Grade]
  subjectArea: [SubjectArea]
  organization: Organization
  category: SchoolType!
  zip: String
  nlnOpt: Boolean!
  siftOpt: Boolean!
  awsAccessToken: String
  awsRefreshToken: String
  awsSub: String!
  token: String
  googleId: String
  microsoftId: String
  createdAt: String!
  updatedAt: String!
}

"""The user status"""
enum UserStatus {
  DEACTIVATED
  ACTIVE
}

"""The country code"""
enum Country {
  UNITED_STATES
  AFGHANISTAN
  ALAND_ISLANDS
  ALBANIA
  ALGERIA
  AMERICAN_SAMOA
  ANDORRA
  ANGOLA
  ANGUILLA
  ANTARCTICA
  ANTIGUA_AND_BARBUDA
  ARGENTINA
  ARMENIA
  ARUBA
  AUSTRALIA
  AUSTRIA
  AZERBAIJAN
  BAHAMAS
  BAHRAIN
  BANGLADESH
  BARBADOS
  BELARUS
  BELGIUM
  BELIZE
  BENIN
  BERMUDA
  BHUTAN
  BOLIVIA
  BONAIRE_SINT_EUSTATIUS_SABA
  BOSNIA_AND_HERZEGOVINA
  BOTSWANA
  BOUVET_ISLAND
  BRAZIL
  BRITISH_INDIAN_OCEAN_TERRITORY
  BRUNEI_DARUSSALAM
  BULGARIA
  BURKINA_FASO
  BURUNDI
  CAMBODIA
  CAMEROON
  CANADA
  CAPE_VERDE
  CAYMAN_ISLANDS
  CENTRAL_AFRICAN_REPUBLIC
  CHAD
  CHILE
  CHINA
  CHRISTMAS_ISLAND
  COCOS_KEELING_ISLANDS
  COLOMBIA
  COMOROS
  CONGO
  CONGO_DEMOCRATIC_REPUBLIC
  COOK_ISLANDS
  COSTA_RICA
  COTE_D_IVOIRE
  CROATIA
  CUBA
  CURACAO
  CYPRUS
  CZECH_REPUBLIC
  DENMARK
  DJIBOUTI
  DOMINICA
  DOMINICAN_REPUBLIC
  ECUADOR
  EGYPT
  EL_SALVADOR
  EQUATORIAL_GUINEA
  ERITREA
  ESTONIA
  ETHIOPIA
  FALKLAND_ISLANDS
  FAROE_ISLANDS
  FIJI
  FINLAND
  FRANCE
  FRENCH_GUIANA
  FRENCH_POLYNESIA
  FRENCH_SOUTHERN_TERRITORIES
  GABON
  GAMBIA
  GEORGIA
  GERMANY
  GHANA
  GIBRALTAR
  GREECE
  GREENLAND
  GRENADA
  GUADELOUPE
  GUAM
  GUATEMALA
  GUERNSEY
  GUINEA
  GUINEA_BISSAU
  GUYANA
  HAITI
  HEARD_ISLAND_MCDONALD_ISLANDS
  HOLY_SEE_VATICAN_CITY_STATE
  HONDURAS
  HONG_KONG
  HUNGARY
  ICELAND
  INDIA
  INDONESIA
  IRAN
  IRAQ
  IRELAND
  ISLE_OF_MAN
  ISRAEL
  ITALY
  JAMAICA
  JAPAN
  JERSEY
  JORDAN
  KAZAKHSTAN
  KENYA
  KIRIBATI
  KOREA
  KOREA_DEMOCRATIC_PEOPLES_REPUBLIC
  KUWAIT
  KYRGYZSTAN
  LAO_PEOPLES_DEMOCRATIC_REPUBLIC
  LATVIA
  LEBANON
  LESOTHO
  LIBERIA
  LIBYAN_ARAB_JAMAHIRIYA
  LIECHTENSTEIN
  LITHUANIA
  LUXEMBOURG
  MACAO
  MACEDONIA
  MADAGASCAR
  MALAWI
  MALAYSIA
  MALDIVES
  MALI
  MALTA
  MARSHALL_ISLANDS
  MARTINIQUE
  MAURITANIA
  MAURITIUS
  MAYOTTE
  MEXICO
  MICRONESIA
  MOLDOVA
  MONACO
  MONGOLIA
  MONTENEGRO
  MONTSERRAT
  MOROCCO
  MOZAMBIQUE
  MYANMAR
  NAMIBIA
  NAURU
  NEPAL
  NETHERLANDS
  NEW_CALEDONIA
  NEW_ZEALAND
  NICARAGUA
  NIGER
  NIGERIA
  NIUE
  NORFOLK_ISLAND
  NORTHERN_MARIANA_ISLANDS
  NORWAY
  OMAN
  PAKISTAN
  PALAU
  PALESTINIAN_TERRITORY
  PANAMA
  PAPUA_NEW_GUINEA
  PARAGUAY
  PERU
  PHILIPPINES
  PITCAIRN
  POLAND
  PORTUGAL
  PUERTO_RICO
  QATAR
  REUNION
  ROMANIA
  RUSSIAN_FEDERATION
  RWANDA
  SAINT_BARTHELEMY
  SAINT_HELENA
  SAINT_KITTS_AND_NEVIS
  SAINT_LUCIA
  SAINT_MARTIN
  SAINT_PIERRE_AND_MIQUELON
  SAINT_VINCENT_AND_GRENADINES
  SAMOA
  SAN_MARINO
  SAO_TOME_AND_PRINCIPE
  SAUDI_ARABIA
  SENEGAL
  SERBIA
  SEYCHELLES
  SIERRA_LEONE
  SINGAPORE
  SINT_MAARTEN
  SLOVAKIA
  SLOVENIA
  SOLOMON_ISLANDS
  SOMALIA
  SOUTH_AFRICA
  SOUTH_GEORGIA_AND_SANDWICH_ISL
  SOUTH_SUDAN
  SPAIN
  SRI_LANKA
  SUDAN
  SURINAME
  SVALBARD_AND_JAN_MAYEN
  SWAZILAND
  SWEDEN
  SWITZERLAND
  SYRIAN_ARAB_REPUBLIC
  TAIWAN
  TAJIKISTAN
  TANZANIA
  THAILAND
  TIMOR_LESTE
  TOGO
  TOKELAU
  TONGA
  TRINIDAD_AND_TOBAGO
  TUNISIA
  TURKEY
  TURKMENISTAN
  TURKS_AND_CAICOS_ISLANDS
  TUVALU
  UGANDA
  UKRAINE
  UNITED_ARAB_EMIRATES
  UNITED_KINGDOM
  UNITED_STATES_OUTLYING_ISLANDS
  URUGUAY
  UZBEKISTAN
  VANUATU
  VENEZUELA
  VIETNAM
  VIRGIN_ISLANDS_BRITISH
  VIRGIN_ISLANDS_US
  WALLIS_AND_FUTUNA
  WESTERN_SAHARA
  YEMEN
  ZAMBIA
  ZIMBABWE
}

type PaginationPayload {
  page: Int
  limit: Int
  totalCount: Int
  totalPages: Int
}

type ResponsePayload {
  status: Float
  error: String
  message: String
  name: String
}

type ResponsePayloadResponse {
  response: ResponsePayload
}

type UsersPayload {
  users: [User]
  pagination: PaginationPayload
  response: ResponsePayload
}

type currentUser {
  id: String!
  firstName: String
  lastName: String
  status: UserStatus!
  emailVerified: Boolean!
  email: String!
  roles: [Role]
  country: Country!
  gradeLevel: [Grade]
  subjectArea: [SubjectArea]
  organization: Organization
  category: SchoolType!
  zip: String
  nlnOpt: Boolean!
  siftOpt: Boolean!
  token: String
  googleId: String
  microsoftId: String
  createdAt: String!
  updatedAt: String!
}

type currentUserPayload {
  pagination: PaginationPayload
  response: ResponsePayload
  user: currentUser
}

type UserMeta {
  first_name: String
  last_name: String
  country: String
}

type AccessUserPayload {
  access_token: String
  shared_domain_token: String
  roles: [Role!]
  email: String
  isEducator: Boolean
  missingUser: UserMeta
  isSSO: Boolean
  response: ResponsePayload
}

type UserPayload {
  user: User
  response: ResponsePayload
}

type ForgotPasswordPayload {
  response: ResponsePayload
}

type OrganizationsPayload {
  pagination: PaginationPayload
  response: ResponsePayload
  organizations: [Organization!]
}

type FiltersType {
  response: ResponsePayload
  duration: [String!]
  journalists: [String!]
  linksToContents: [String!]
  resourceTypes: [String!]
  nlnoTopNavigations: [String!]
  formats: [String!]
  gradeLevels: [String!]
  classRoomNeeds: [String!]
  subjectAreas: [String!]
  nlpStandards: [String!]
  newsLiteracyTopics: [String!]
  contentWarnings: [String!]
  evaluationPreferences: [String!]
  assessmentTypes: [String!]
  prerequisites: [String!]
  onlyOnCheckology: Boolean
  featuredInSift: Boolean
}

type ResourcesFilters {
  response: ResponsePayload
  filters: FiltersType
}

type ResourceFake {
  id: String!
  contentTitle: String!
  contentDescription: String!
  estimatedTimeToComplete: String!
  journalist: String!
  linksToContent: String!
  resourceType: String!
  nlnoTopNavigation: String!
  format: String!
  gradeLevel: String!
  classRoomNeed: String!
  subjectArea: String!
  nlpStandard: String!
  newsLiteracyTopic: String!
  contentWarning: String!
  evaluationPreference: String!
  assessmentType: String!
  prerequisite: String!
}

type ResourcePayload {
  response: ResponsePayload
  resource: Resource
}

type ResourcesPayload {
  response: ResponsePayload
  resources: [Resource]
  pagination: PaginationPayload
}

input SubjectAreaInput {
  name: String
}

input GradeInput {
  name: String
}

input AssessmentTypeInput {
  name: String
}

input ClassRoomNeedInput {
  name: String
}

input LinksToContentInput {
  name: String
  url: String
}

input FormatInput {
  name: String
}

input JournalistInput {
  Name: String
  Organization: String = null
}

input ResourceTypeInput {
  name: String
}

input NLNOTopNavigationInput {
  name: String
}

input NlpStandardInput {
  name: String
  description: String
}

input NewsLiteracyTopicInput {
  name: String
}

input ContentWarningInput {
  name: String
}

input EvaluationPreferenceInput {
  name: String
}

input PrerequisiteInput {
  name: String
}

type Query {
  fetchAllUsers(userInput: UsersInput!): UsersPayload!
  fetchUser: UserPayload!
  me: currentUserPayload!
  searchUser(searchUserInput: SearchUserInput!): UsersPayload!
  checkUserCognito(email: String!): AccessUserPayload!
  autoLogin(token: String!): AccessUserPayload!
  verifyUserRegister(checkUserAlreadyExistsInput: CheckUserAlreadyExistsInput!): ResponsePayloadResponse!
  getOrganizations(filterOrganization: OrganizationSearchInput!): OrganizationsPayload!
  getResource(getResource: GetResource!): ResourcePayload!
  getResources(resourceInput: ResourceInput!): ResourcesPayload!
  getResourceFilters: ResourcesFilters!
}

input UsersInput {
  from: String
  to: String
  status: UserStatus
  roles: [UserRole!]
  paginationOptions: PaginationInput!
}

input PaginationInput {
  page: Int!
  limit: Int!
}

input SearchUserInput {
  searchTerm: String!
  roles: [UserRole!]!
}

input CheckUserAlreadyExistsInput {
  email: String
  role: String
  socialLogin: socialAuthInput
}

input socialAuthInput {
  token: String!
  provider: Provider!
}

"""The OAuth providers to register or signIn"""
enum Provider {
  Google
  Microsoft
}

input OrganizationSearchInput {
  category: SchoolType!
  searchSchool: String
  paginationOptions: PaginationInput
}

input GetResource {
  slug: String!
}

input ResourceInput {
  paginationOptions: PaginationInput!
  searchString: String
  mostRelevant: Boolean
  orderBy: String
  alphabetic: Boolean = true
  resourceTypes: [String!]
  topics: [String!]
  subjects: [String!]
  gradeLevels: [String!]
  nlpStandards: [String!]
  classRoomNeeds: [String!]
  formats: [String!]
  evaluationPreferences: [String!]
  estimatedTimeToComplete: String
  onlyOnCheckology: Boolean
  featuredInSift: Boolean
}

type Mutation {
  login(loginUser: LoginUserInput!): AccessUserPayload!
  forgotPassword(forgotPassword: ForgotPasswordInput!): ForgotPasswordPayload!
  resetPassword(resetPassword: ResetPasswordInput!): UserPayload!
  registerUser(registerUser: RegisterUserInput!): UserPayload!
  deactivateUser(user: UserIdInput!): UserPayload!
  activateUser(user: UserIdInput!): UserPayload!
  updatePassword(updatePasswordInput: UpdatePasswordInput!): UserPayload!
  removeUser(user: UserIdInput!): UserPayload!
  registerWithGoogle(registerWithGoogleInput: RegisterWithGoogleInput!): UserPayload!
  loginWithGoogle(loginWithGoogleInput: OAuthProviderInput!): AccessUserPayload!
  registerWithMicrosoft(registerWithMicrosoftInput: RegisterWithMicrosoftInput!): UserPayload!
  loginWithMicrosoft(loginWithMicrosoftInput: OAuthProviderInput!): AccessUserPayload!
  createResource(createResourceInput: CreateResourceInput!): ResourcePayload!
  updateResource(updateResourceInput: UpdateResourceInput!): ResourcePayload!
  removeResource(id: RemoveResource!): ResourcePayload!
}

input LoginUserInput {
  email: String
  username: String
  password: String!
}

input ForgotPasswordInput {
  email: String!
}

input ResetPasswordInput {
  password: String!
  token: String!
}

input RegisterUserInput {
  firstName: String
  lastName: String
  password: String!
  email: String!
  googleId: String
  microsoftId: String
  country: Country
  category: SchoolType
  zip: String
  subjectAreas: [String]!
  grades: [String]!
  organization: OrganizationInput
  nlnOpt: Boolean = true
  siftOpt: Boolean = false
  isMissing: Boolean = false
}

input OrganizationInput {
  name: String!
  zip: String!
  city: String!
  state: String
  street: String
  category: SchoolType!
}

input UserIdInput {
  userId: String!
}

input UpdatePasswordInput {
  id: String!
  newPassword: String!
}

input RegisterWithGoogleInput {
  firstName: String
  lastName: String
  googleId: String
  microsoftId: String
  country: Country
  category: SchoolType
  zip: String
  subjectAreas: [String]!
  grades: [String]!
  organization: OrganizationInput
  nlnOpt: Boolean = true
  siftOpt: Boolean = false
  isMissing: Boolean = false
  token: String!
}

input OAuthProviderInput {
  token: String!
}

input RegisterWithMicrosoftInput {
  firstName: String
  lastName: String
  googleId: String
  microsoftId: String
  country: Country
  category: SchoolType
  zip: String
  subjectAreas: [String]!
  grades: [String]!
  organization: OrganizationInput
  nlnOpt: Boolean = true
  siftOpt: Boolean = false
  isMissing: Boolean = false
  token: String!
}

input CreateResourceInput {
  contentTitle: String
  contentDescription: String
  estimatedTimeToComplete: String
  journalists: [JournalistInput!]
  linksToContents: [LinksToContentInput!]
  resourceTypes: [ResourceTypeInput!]
  nlnoTopNavigations: [NLNOTopNavigationInput!]
  formats: [FormatInput!]
  gradeLevels: [GradeInput!]
  classRoomNeeds: [ClassRoomNeedInput!]
  subjectAreas: [SubjectAreaInput!]
  nlpStandards: [NlpStandardInput!]
  newsLiteracyTopics: [NewsLiteracyTopicInput!]
  contentWarnings: [ContentWarningInput!]
  evaluationPreferences: [EvaluationPreferenceInput!]
  assessmentTypes: [AssessmentTypeInput!]
  prerequisites: [PrerequisiteInput!]
}

input UpdateResourceInput {
  contentTitle: String
  contentDescription: String
  estimatedTimeToComplete: String
  journalists: [JournalistInput!]
  linksToContents: [LinksToContentInput!]
  resourceTypes: [ResourceTypeInput!]
  nlnoTopNavigations: [NLNOTopNavigationInput!]
  formats: [FormatInput!]
  gradeLevels: [GradeInput!]
  classRoomNeeds: [ClassRoomNeedInput!]
  subjectAreas: [SubjectAreaInput!]
  nlpStandards: [NlpStandardInput!]
  newsLiteracyTopics: [NewsLiteracyTopicInput!]
  contentWarnings: [ContentWarningInput!]
  evaluationPreferences: [EvaluationPreferenceInput!]
  assessmentTypes: [AssessmentTypeInput!]
  prerequisites: [PrerequisiteInput!]
  id: String!
  slug: String!
}

input RemoveResource {
  id: String!
}