# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Role {
  id: String!
  role: UserRole!
  createdAt: String!
  updatedAt: String!
}

"""The user role assigned"""
enum UserRole {
  SUPER_ADMIN
  ADMIN
  ATTORNEY
  PARALEGAL
  INVESTIGATOR
}

type User {
  id: String!
  firstName: String
  lastName: String
  status: UserStatus!
  emailVerified: Boolean!
  email: String!
  roles: [Role]
  phoneNumber: String
  createdAt: String!
  updatedAt: String!
}

"""The user status"""
enum UserStatus {
  DEACTIVATED
  ACTIVE
}

type PaginationPayload {
  page: Int
  limit: Int
  totalCount: Int
  totalPages: Int
}

type ResponsePayload {
  status: Float
  error: String
  message: String
  name: String
}

type UsersPayload {
  users: [User]
  pagination: PaginationPayload
  response: ResponsePayload
}

type AccessUserPayload {
  access_token: String
  roles: [Role!]
  response: ResponsePayload
}

type UserPayload {
  user: User
  response: ResponsePayload
}

type RolesPayload {
  roles: [Role]
  response: ResponsePayload
}

type ClassRoomNeed {
  id: String!
  name: String
  createdAt: String!
  updatedAt: String!
}

type ContentWarning {
  id: String!
  name: String
  createdAt: String!
  updatedAt: String!
}

type EvaluationPreference {
  id: String!
  name: String
  createdAt: String!
  updatedAt: String!
}

type Format {
  id: String!
  name: String
  createdAt: String!
  updatedAt: String!
}

type Grade {
  id: String!
  name: String
  createdAt: String!
  updatedAt: String!
}

type Journalist {
  id: String!
  name: String
  createdAt: String!
  updatedAt: String!
}

type NewsLiteracyTopic {
  id: String!
  name: String
  createdAt: String!
  updatedAt: String!
}

type NLNOTopNavigation {
  id: String!
  name: String
  createdAt: String!
  updatedAt: String!
}

type NlpStandard {
  id: String!
  name: String
  createdAt: String!
  updatedAt: String!
}

type Prerequisite {
  id: String!
  name: String
  createdAt: String!
  updatedAt: String!
}

type ResourceType {
  id: String!
  name: String
  createdAt: String!
  updatedAt: String!
}

type SubjectArea {
  id: String!
  name: String
  createdAt: String!
  updatedAt: String!
}

type Resource {
  id: String!
  contentTitle: String
  contentDescription: String
  estimatedTimeToComplete: String
  journalist: [Journalist]
  resourceType: [ResourceType]
  nlnoTopNavigation: [NLNOTopNavigation]
  format: [Format]
  gradeLevel: [Grade]
  classRoomNeed: [ClassRoomNeed]
  subjectArea: [SubjectArea]
  nlpStandard: [NlpStandard]
  newsLiteracyTopic: [NewsLiteracyTopic]
  contentWarning: [ContentWarning]
  evaluationPreference: [EvaluationPreference]
  assessmentType: [AssessmentType]
  prerequisite: [Prerequisite]
  createdAt: String!
  updatedAt: String!
}

type AssessmentType {
  id: String!
  name: String
  createdAt: String!
  updatedAt: String!
}

type ResourcePayload {
  response: ResponsePayload
  resource: Resource
}

type Query {
  fetchAllUsers(userInput: UsersInput!): UsersPayload!
  fetchUser: UserPayload!
  me: UserPayload!
  fetchAllRoles: RolesPayload!
  searchUser(searchUserInput: SearchUserInput!): UsersPayload!
  getResource(getResource: GetResource!): ResourcePayload!
}

input UsersInput {
  from: String
  to: String
  status: UserStatus
  roles: [UserRole!]
  paginationOptions: PaginationInput!
}

input PaginationInput {
  page: Int!
  limit: Int!
}

input SearchUserInput {
  searchTerm: String!
  roles: [UserRole!]!
}

input GetResource {
  id: String!
}

type Mutation {
  login(loginUser: LoginUserInput!): AccessUserPayload!
  registerUser(user: RegisterUserInput!): UserPayload!
  deactivateUser(user: UserIdInput!): UserPayload!
  activateUser(user: UserIdInput!): UserPayload!
  updateUser(user: UpdateUserInput!): UserPayload!
  updateRole(user: UpdateRoleInput!): UserPayload!
  updatePassword(updatePasswordInput: UpdatePasswordInput!): UserPayload!
  removeUser(user: UserIdInput!): UserPayload!
  updateResource(updateResourceInput: UpdateResourceInput!): ResourcePayload!
  removeResource(id: RemoveResource!): ResourcePayload!
}

input LoginUserInput {
  email: String!
  password: String!
}

input RegisterUserInput {
  firstName: String
  lastName: String
  password: String
  phoneNumber: String
  email: String!

  """Send Investor Type from the ENUM - Sign-up"""
  roleType: UserRole!
}

input UserIdInput {
  userId: String!
}

input UpdateUserInput {
  firstName: String
  lastName: String
  phoneNumber: String
  email: String
  id: String!
}

input UpdateRoleInput {
  id: String!
  roles: [UserRole!]!
}

input UpdatePasswordInput {
  id: String!
  newPassword: String!
}

input UpdateResourceInput {
  name: String
  id: String!
}

input RemoveResource {
  id: String!
}